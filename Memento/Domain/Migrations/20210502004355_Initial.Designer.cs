// <auto-generated />
using System;
using Domain.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Domain.Migrations
{
    [DbContext(typeof(StreamContext))]
    [Migration("20210502004355_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Entities.Album", b =>
                {
                    b.Property<int>("AlbumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AlbumId");

                    b.HasIndex("UserId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("Domain.Entities.AlbumDrop", b =>
                {
                    b.Property<int>("AlbumId")
                        .HasColumnType("int");

                    b.Property<int>("DropId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.HasKey("AlbumId", "DropId");

                    b.HasIndex("DropId");

                    b.ToTable("AlbumDrops");
                });

            modelBuilder.Entity("Domain.Entities.AlbumExport", b =>
                {
                    b.Property<int>("AlbumExportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AlbumId")
                        .HasColumnType("int");

                    b.Property<string>("AlbumPublicId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AlbumExportId");

                    b.HasIndex("AlbumId");

                    b.ToTable("AlbumExports");
                });

            modelBuilder.Entity("Domain.Entities.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("DropId")
                        .HasColumnType("int");

                    b.Property<int>("Kind")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("DropId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Domain.Entities.ContactRequest", b =>
                {
                    b.Property<int>("ContactRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasMaxLength(3500)
                        .HasColumnType("nvarchar(3500)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ContactRequestId");

                    b.ToTable("ContactRequests");
                });

            modelBuilder.Entity("Domain.Entities.ContentDrop", b =>
                {
                    b.Property<int>("ContentDropId")
                        .HasColumnType("int");

                    b.Property<string>("Stuff")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContentDropId");

                    b.ToTable("ContentDrops");
                });

            modelBuilder.Entity("Domain.Entities.Drop", b =>
                {
                    b.Property<int>("DropId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Completed")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CompletedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DateType")
                        .HasColumnType("int");

                    b.Property<int>("DayOfYear")
                        .HasColumnType("int");

                    b.Property<int?>("ParentDropId")
                        .HasColumnType("int");

                    b.Property<int?>("PromptId")
                        .HasColumnType("int");

                    b.Property<int?>("TimelineId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DropId");

                    b.HasIndex("CompletedByUserId");

                    b.HasIndex("ParentDropId")
                        .HasDatabaseName("IX_Drop_ParentDropId");

                    b.HasIndex("PromptId");

                    b.HasIndex("TimelineId");

                    b.HasIndex("UserId");

                    b.ToTable("Drops");
                });

            modelBuilder.Entity("Domain.Entities.ImageDrop", b =>
                {
                    b.Property<int>("ImageDropId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommentId")
                        .HasColumnType("int");

                    b.Property<int>("DropId")
                        .HasColumnType("int");

                    b.HasKey("ImageDropId");

                    b.HasIndex("CommentId");

                    b.HasIndex("DropId");

                    b.ToTable("ImageDrops");
                });

            modelBuilder.Entity("Domain.Entities.Log", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logger")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Thread")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Domain.Entities.MovieDrop", b =>
                {
                    b.Property<int>("MovieDropId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommentId")
                        .HasColumnType("int");

                    b.Property<int>("DropId")
                        .HasColumnType("int");

                    b.HasKey("MovieDropId");

                    b.HasIndex("CommentId");

                    b.HasIndex("DropId");

                    b.ToTable("MovieDrops");
                });

            modelBuilder.Entity("Domain.Entities.PremiumPlan", b =>
                {
                    b.Property<int>("PremiumPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExtendedPlanId")
                        .HasColumnType("int");

                    b.Property<int>("FamilyPlanCount")
                        .HasColumnType("int");

                    b.Property<int?>("ParentPremiumPlanId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("PlanLengthDays")
                        .HasColumnType("int");

                    b.Property<int>("PlanType")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PremiumPlanId");

                    b.HasIndex("ParentPremiumPlanId");

                    b.HasIndex("TransactionId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_PremiumPlan_UserId");

                    b.ToTable("PremiumPlans");
                });

            modelBuilder.Entity("Domain.Entities.Prompt", b =>
                {
                    b.Property<int>("PromptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("Relationship")
                        .HasColumnType("int");

                    b.Property<bool>("Template")
                        .HasColumnType("bit");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PromptId");

                    b.HasIndex("UserId");

                    b.ToTable("Prompts");
                });

            modelBuilder.Entity("Domain.Entities.PromptTimeline", b =>
                {
                    b.Property<int>("PromptIdTimelineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PromptId")
                        .HasColumnType("int");

                    b.Property<int>("TimelineId")
                        .HasColumnType("int");

                    b.HasKey("PromptIdTimelineId");

                    b.HasIndex("TimelineId");

                    b.HasIndex("PromptId", "TimelineId")
                        .IsUnique()
                        .HasDatabaseName("IX_PromptTimelines_PromptId_TimelineId");

                    b.ToTable("PromptTimelines");
                });

            modelBuilder.Entity("Domain.Entities.ShareRequest", b =>
                {
                    b.Property<int>("ShareRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Ignored")
                        .HasColumnType("bit");

                    b.Property<int?>("PremiumPlanId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("PromptId")
                        .HasColumnType("int");

                    b.Property<Guid>("RequestKey")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RequesterUserId")
                        .HasColumnType("int");

                    b.Property<string>("RequestorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagsToShare")
                        .HasMaxLength(8000)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("TargetAlias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetsEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TargetsUserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("TimelineId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Used")
                        .HasColumnType("bit");

                    b.HasKey("ShareRequestId");

                    b.HasIndex("PremiumPlanId");

                    b.HasIndex("RequesterUserId");

                    b.HasIndex("TargetsUserId");

                    b.ToTable("ShareRequests");
                });

            modelBuilder.Entity("Domain.Entities.SharedDropNotification", b =>
                {
                    b.Property<int>("SharedDropNotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DropId")
                        .HasColumnType("int");

                    b.Property<int>("SharerUserId")
                        .HasColumnType("int");

                    b.Property<int>("TargetUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeShared")
                        .HasColumnType("datetime2");

                    b.HasKey("SharedDropNotificationId");

                    b.HasIndex("DropId");

                    b.HasIndex("SharerUserId");

                    b.HasIndex("TargetUserId");

                    b.ToTable("SharedDropNotifications");
                });

            modelBuilder.Entity("Domain.Entities.SharedPlan", b =>
                {
                    b.Property<int>("SharedPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailSentTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Revoked")
                        .HasColumnType("bit");

                    b.Property<int?>("SharedPremiumPlanId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SharedPlanId");

                    b.HasIndex("SharedPremiumPlanId")
                        .HasDatabaseName("IX_SharedPlan_PremiumPlan");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_SharedPlan_UserId");

                    b.ToTable("SharedPlans");
                });

            modelBuilder.Entity("Domain.Entities.SharingSuggestion", b =>
                {
                    b.Property<int>("OwnerUserId")
                        .HasColumnType("int");

                    b.Property<int>("SuggestedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Points")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Reason")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("Resolution")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Resolved")
                        .HasColumnType("datetime2");

                    b.HasKey("OwnerUserId", "SuggestedUserId");

                    b.HasIndex("SuggestedUserId");

                    b.ToTable("SharingSuggestions");
                });

            modelBuilder.Entity("Domain.Entities.TagDrop", b =>
                {
                    b.Property<int>("TagDropId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DropId")
                        .HasColumnType("int");

                    b.Property<long>("UserTagId")
                        .HasColumnType("bigint");

                    b.HasKey("TagDropId");

                    b.HasIndex("DropId");

                    b.HasIndex("UserTagId", "DropId")
                        .IsUnique()
                        .HasDatabaseName("IX_TagDrop_UserTagId_DropId");

                    b.ToTable("NetworkDrops");
                });

            modelBuilder.Entity("Domain.Entities.TagViewer", b =>
                {
                    b.Property<long>("UserTagId")
                        .HasColumnType("bigint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserTagId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("NetworkViewers");
                });

            modelBuilder.Entity("Domain.Entities.TimeMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TimeMethods");
                });

            modelBuilder.Entity("Domain.Entities.Timeline", b =>
                {
                    b.Property<int>("TimelineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TimelineId");

                    b.HasIndex("UserId");

                    b.ToTable("Timelines");
                });

            modelBuilder.Entity("Domain.Entities.TimelineDrop", b =>
                {
                    b.Property<int>("TimelineId")
                        .HasColumnType("int");

                    b.Property<int>("DropId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TimelineId", "DropId");

                    b.HasIndex("DropId");

                    b.HasIndex("UserId");

                    b.ToTable("TimelineDrops");
                });

            modelBuilder.Entity("Domain.Entities.TimelineUser", b =>
                {
                    b.Property<int>("TimelineUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TimelineId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TimelineUserId");

                    b.HasIndex("TimelineId");

                    b.HasIndex("UserId", "TimelineId")
                        .IsUnique();

                    b.ToTable("TimelineUsers");
                });

            modelBuilder.Entity("Domain.Entities.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmountCents")
                        .HasColumnType("int");

                    b.Property<string>("ChargeId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TransactionId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Transaction_UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Domain.Entities.Usage", b =>
                {
                    b.Property<long>("UsageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UsageId");

                    b.ToTable("Usages");
                });

            modelBuilder.Entity("Domain.Entities.UserActivityLog", b =>
                {
                    b.Property<int>("UserActivityLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("KeyColumn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeyValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserActivityLogId");

                    b.ToTable("UserActivityLogs");
                });

            modelBuilder.Entity("Domain.Entities.UserDrop", b =>
                {
                    b.Property<int>("UserDropId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DropId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserDropId");

                    b.HasIndex("DropId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDrops");
                });

            modelBuilder.Entity("Domain.Entities.UserEmail", b =>
                {
                    b.Property<int>("UserEmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Confirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Token")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<DateTime>("TokenExpiration")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserEmailId");

                    b.HasIndex("UserId");

                    b.ToTable("UserEmails");
                });

            modelBuilder.Entity("Domain.Entities.UserProfile", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AcceptedTerms")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentNotifications")
                        .HasMaxLength(8000)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("CurrentPeople")
                        .HasMaxLength(8000)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("CurrentSuggestedPeople")
                        .HasMaxLength(8000)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("CurrentTagIds")
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("GiveFeedback")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Me")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("NotififySuggestions")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PremiumExpiration")
                        .HasColumnType("datetime2");

                    b.Property<bool>("PrivateMode")
                        .HasColumnType("bit");

                    b.Property<DateTime>("QuestionRemindersSent")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reasons")
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)");

                    b.Property<int?>("Skip")
                        .HasColumnType("int");

                    b.Property<DateTime>("SuggestionReminderSent")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SuggestionUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("TokenAttempts")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TokenCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("UserId", "PremiumExpiration")
                        .HasDatabaseName("IX_UserId_PremiumExpiration");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("Domain.Entities.UserPrompt", b =>
                {
                    b.Property<long>("UserPromptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Dismissed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastSeen")
                        .HasColumnType("datetime2");

                    b.Property<int>("PromptId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Used")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserPromptId");

                    b.HasIndex("LastSeen");

                    b.HasIndex("PromptId")
                        .HasDatabaseName("IX_UserPrompt_PromptId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_UserPrompt_UserId");

                    b.HasIndex("PromptId", "UserId")
                        .IsUnique();

                    b.ToTable("UserPrompts");
                });

            modelBuilder.Entity("Domain.Entities.UserPromptAsker", b =>
                {
                    b.Property<long>("UserPromptAskerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AskerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserPromptId")
                        .HasColumnType("bigint");

                    b.HasKey("UserPromptAskerId");

                    b.HasIndex("AskerId");

                    b.HasIndex("UserPromptId");

                    b.ToTable("UserPromptAskers");
                });

            modelBuilder.Entity("Domain.Entities.UserRelationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Relationship")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Relationship")
                        .IsUnique();

                    b.ToTable("UserRelationships");
                });

            modelBuilder.Entity("Domain.Entities.UserTag", b =>
                {
                    b.Property<long>("UserTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsTask")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserTagId");

                    b.HasIndex("UserId", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_UserId_Name")
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("UserNetworks");
                });

            modelBuilder.Entity("Domain.Entities.UserUser", b =>
                {
                    b.Property<int>("UserUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Archive")
                        .HasColumnType("bit");

                    b.Property<bool>("CanReShare")
                        .HasColumnType("bit");

                    b.Property<int>("OwnerUserId")
                        .HasColumnType("int");

                    b.Property<string>("ReaderName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ReaderUserId")
                        .HasColumnType("int");

                    b.Property<bool>("SendNotificationEmail")
                        .HasColumnType("bit");

                    b.HasKey("UserUserId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("ReaderUserId");

                    b.HasIndex("ReaderUserId", "OwnerUserId")
                        .IsUnique()
                        .HasDatabaseName("IX_UserUser_ReaderUserId_OwnerUserId");

                    b.ToTable("UserUsers");
                });

            modelBuilder.Entity("Domain.Entities.Album", b =>
                {
                    b.HasOne("Domain.Entities.UserProfile", "Owner")
                        .WithMany("Albums")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Domain.Entities.AlbumDrop", b =>
                {
                    b.HasOne("Domain.Entities.Album", "Album")
                        .WithMany("AlbumDrops")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Drop", "Drop")
                        .WithMany("AlbumDrops")
                        .HasForeignKey("DropId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Drop");
                });

            modelBuilder.Entity("Domain.Entities.AlbumExport", b =>
                {
                    b.HasOne("Domain.Entities.Album", "Album")
                        .WithMany("AlbumExports")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("Domain.Entities.Comment", b =>
                {
                    b.HasOne("Domain.Entities.Drop", "Drop")
                        .WithMany("Comments")
                        .HasForeignKey("DropId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserProfile", "Owner")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Drop");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Domain.Entities.ContentDrop", b =>
                {
                    b.HasOne("Domain.Entities.Drop", "Drop")
                        .WithOne("ContentDrop")
                        .HasForeignKey("Domain.Entities.ContentDrop", "ContentDropId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Drop");
                });

            modelBuilder.Entity("Domain.Entities.Drop", b =>
                {
                    b.HasOne("Domain.Entities.UserProfile", "CompletedBy")
                        .WithMany("Completed")
                        .HasForeignKey("CompletedByUserId");

                    b.HasOne("Domain.Entities.Drop", "ParentDrop")
                        .WithMany("ChildrenDrops")
                        .HasForeignKey("ParentDropId");

                    b.HasOne("Domain.Entities.Prompt", "Prompt")
                        .WithMany("Drops")
                        .HasForeignKey("PromptId");

                    b.HasOne("Domain.Entities.Timeline", "Timeline")
                        .WithMany()
                        .HasForeignKey("TimelineId");

                    b.HasOne("Domain.Entities.UserProfile", "CreatedBy")
                        .WithMany("Drops")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompletedBy");

                    b.Navigation("CreatedBy");

                    b.Navigation("ParentDrop");

                    b.Navigation("Prompt");

                    b.Navigation("Timeline");
                });

            modelBuilder.Entity("Domain.Entities.ImageDrop", b =>
                {
                    b.HasOne("Domain.Entities.Comment", "Comment")
                        .WithMany("Images")
                        .HasForeignKey("CommentId");

                    b.HasOne("Domain.Entities.Drop", "Drop")
                        .WithMany("Images")
                        .HasForeignKey("DropId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Drop");
                });

            modelBuilder.Entity("Domain.Entities.MovieDrop", b =>
                {
                    b.HasOne("Domain.Entities.Comment", "Comment")
                        .WithMany("Movies")
                        .HasForeignKey("CommentId");

                    b.HasOne("Domain.Entities.Drop", "Drop")
                        .WithMany("Movies")
                        .HasForeignKey("DropId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Drop");
                });

            modelBuilder.Entity("Domain.Entities.PremiumPlan", b =>
                {
                    b.HasOne("Domain.Entities.PremiumPlan", "ParentPremiumPlan")
                        .WithMany("ChildrenPremiumPlans")
                        .HasForeignKey("ParentPremiumPlanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Transaction", "Transaction")
                        .WithMany("PremiumPlans")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserProfile", "UserProfile")
                        .WithMany("PremiumPlans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentPremiumPlan");

                    b.Navigation("Transaction");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Domain.Entities.Prompt", b =>
                {
                    b.HasOne("Domain.Entities.UserProfile", "Owner")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Domain.Entities.PromptTimeline", b =>
                {
                    b.HasOne("Domain.Entities.Prompt", "Prompt")
                        .WithMany("PromptTimelines")
                        .HasForeignKey("PromptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Timeline", "Timeline")
                        .WithMany("TimelinePrompts")
                        .HasForeignKey("TimelineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prompt");

                    b.Navigation("Timeline");
                });

            modelBuilder.Entity("Domain.Entities.ShareRequest", b =>
                {
                    b.HasOne("Domain.Entities.PremiumPlan", "PremiumPlan")
                        .WithMany("ShareRequests")
                        .HasForeignKey("PremiumPlanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserProfile", "RequestingUser")
                        .WithMany("MyRequests")
                        .HasForeignKey("RequesterUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserProfile", "TargetUser")
                        .WithMany("OthersRequestingMe")
                        .HasForeignKey("TargetsUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PremiumPlan");

                    b.Navigation("RequestingUser");

                    b.Navigation("TargetUser");
                });

            modelBuilder.Entity("Domain.Entities.SharedDropNotification", b =>
                {
                    b.HasOne("Domain.Entities.Drop", "Drop")
                        .WithMany("Notifications")
                        .HasForeignKey("DropId");

                    b.HasOne("Domain.Entities.UserProfile", "Sharer")
                        .WithMany("TargetNotifications")
                        .HasForeignKey("SharerUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserProfile", "Target")
                        .WithMany("MyNotifications")
                        .HasForeignKey("TargetUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Drop");

                    b.Navigation("Sharer");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("Domain.Entities.SharedPlan", b =>
                {
                    b.HasOne("Domain.Entities.PremiumPlan", "SharedPremiumPlan")
                        .WithMany("PlansSharedFrom")
                        .HasForeignKey("SharedPremiumPlanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserProfile", "UserProfile")
                        .WithMany("SharedPlans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SharedPremiumPlan");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Domain.Entities.SharingSuggestion", b =>
                {
                    b.HasOne("Domain.Entities.UserProfile", "OwnerUser")
                        .WithMany("SharingSuggestions")
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserProfile", "SuggestedUser")
                        .WithMany("SuggestedTo")
                        .HasForeignKey("SuggestedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("OwnerUser");

                    b.Navigation("SuggestedUser");
                });

            modelBuilder.Entity("Domain.Entities.TagDrop", b =>
                {
                    b.HasOne("Domain.Entities.Drop", "Drop")
                        .WithMany("TagDrops")
                        .HasForeignKey("DropId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserTag", "UserTag")
                        .WithMany("TagDrops")
                        .HasForeignKey("UserTagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Drop");

                    b.Navigation("UserTag");
                });

            modelBuilder.Entity("Domain.Entities.TagViewer", b =>
                {
                    b.HasOne("Domain.Entities.UserProfile", "Viewer")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserTag", "UserTag")
                        .WithMany("TagViewers")
                        .HasForeignKey("UserTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserTag");

                    b.Navigation("Viewer");
                });

            modelBuilder.Entity("Domain.Entities.Timeline", b =>
                {
                    b.HasOne("Domain.Entities.UserProfile", "Owner")
                        .WithMany("CreatedTimeLines")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Domain.Entities.TimelineDrop", b =>
                {
                    b.HasOne("Domain.Entities.Drop", "Drop")
                        .WithMany("TimelineDrops")
                        .HasForeignKey("DropId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Timeline", "Timeline")
                        .WithMany("TimelineDrops")
                        .HasForeignKey("TimelineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserProfile", "UserProfile")
                        .WithMany("TimelineDrops")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Drop");

                    b.Navigation("Timeline");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Domain.Entities.TimelineUser", b =>
                {
                    b.HasOne("Domain.Entities.Timeline", "Timeline")
                        .WithMany("TimelineUsers")
                        .HasForeignKey("TimelineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserProfile", "User")
                        .WithMany("TimeLines")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Timeline");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Transaction", b =>
                {
                    b.HasOne("Domain.Entities.UserProfile", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserDrop", b =>
                {
                    b.HasOne("Domain.Entities.Drop", "Drop")
                        .WithMany("OtherUsersDrops")
                        .HasForeignKey("DropId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserProfile", "User")
                        .WithMany("OtherPeoplesDrops")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Drop");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserEmail", b =>
                {
                    b.HasOne("Domain.Entities.UserProfile", "User")
                        .WithMany("AlternateEmails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserPrompt", b =>
                {
                    b.HasOne("Domain.Entities.Prompt", "Prompt")
                        .WithMany("UserPrompts")
                        .HasForeignKey("PromptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserProfile", "User")
                        .WithMany("UserPrompts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prompt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserPromptAsker", b =>
                {
                    b.HasOne("Domain.Entities.UserProfile", "Asker")
                        .WithMany()
                        .HasForeignKey("AskerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserPrompt", "UserPrompt")
                        .WithMany("Askers")
                        .HasForeignKey("UserPromptId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Asker");

                    b.Navigation("UserPrompt");
                });

            modelBuilder.Entity("Domain.Entities.UserRelationship", b =>
                {
                    b.HasOne("Domain.Entities.UserProfile", "User")
                        .WithMany("UserRelationships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserTag", b =>
                {
                    b.HasOne("Domain.Entities.UserProfile", "Owner")
                        .WithMany("UserTags")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Domain.Entities.UserUser", b =>
                {
                    b.HasOne("Domain.Entities.UserProfile", "OwnerUser")
                        .WithMany("ShareWithUser")
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserProfile", "ReaderUser")
                        .WithMany("SharedWithUser")
                        .HasForeignKey("ReaderUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("OwnerUser");

                    b.Navigation("ReaderUser");
                });

            modelBuilder.Entity("Domain.Entities.Album", b =>
                {
                    b.Navigation("AlbumDrops");

                    b.Navigation("AlbumExports");
                });

            modelBuilder.Entity("Domain.Entities.Comment", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Movies");
                });

            modelBuilder.Entity("Domain.Entities.Drop", b =>
                {
                    b.Navigation("AlbumDrops");

                    b.Navigation("ChildrenDrops");

                    b.Navigation("Comments");

                    b.Navigation("ContentDrop");

                    b.Navigation("Images");

                    b.Navigation("Movies");

                    b.Navigation("Notifications");

                    b.Navigation("OtherUsersDrops");

                    b.Navigation("TagDrops");

                    b.Navigation("TimelineDrops");
                });

            modelBuilder.Entity("Domain.Entities.PremiumPlan", b =>
                {
                    b.Navigation("ChildrenPremiumPlans");

                    b.Navigation("PlansSharedFrom");

                    b.Navigation("ShareRequests");
                });

            modelBuilder.Entity("Domain.Entities.Prompt", b =>
                {
                    b.Navigation("Drops");

                    b.Navigation("PromptTimelines");

                    b.Navigation("UserPrompts");
                });

            modelBuilder.Entity("Domain.Entities.Timeline", b =>
                {
                    b.Navigation("TimelineDrops");

                    b.Navigation("TimelinePrompts");

                    b.Navigation("TimelineUsers");
                });

            modelBuilder.Entity("Domain.Entities.Transaction", b =>
                {
                    b.Navigation("PremiumPlans");
                });

            modelBuilder.Entity("Domain.Entities.UserProfile", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("AlternateEmails");

                    b.Navigation("Comments");

                    b.Navigation("Completed");

                    b.Navigation("CreatedTimeLines");

                    b.Navigation("Drops");

                    b.Navigation("MyNotifications");

                    b.Navigation("MyRequests");

                    b.Navigation("OtherPeoplesDrops");

                    b.Navigation("OthersRequestingMe");

                    b.Navigation("PremiumPlans");

                    b.Navigation("SharedPlans");

                    b.Navigation("SharedWithUser");

                    b.Navigation("ShareWithUser");

                    b.Navigation("SharingSuggestions");

                    b.Navigation("SuggestedTo");

                    b.Navigation("TargetNotifications");

                    b.Navigation("TimelineDrops");

                    b.Navigation("TimeLines");

                    b.Navigation("Transactions");

                    b.Navigation("UserPrompts");

                    b.Navigation("UserRelationships");

                    b.Navigation("UserTags");
                });

            modelBuilder.Entity("Domain.Entities.UserPrompt", b =>
                {
                    b.Navigation("Askers");
                });

            modelBuilder.Entity("Domain.Entities.UserTag", b =>
                {
                    b.Navigation("TagDrops");

                    b.Navigation("TagViewers");
                });
#pragma warning restore 612, 618
        }
    }
}
